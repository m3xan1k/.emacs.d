* default CONTACT
  #+begin_src emacs-lisp
    (setq user-full-name "Sergey Shevtsov")
    (setq user-mail-address "m3xan1k@duck.com")
  #+end_src


* default UI
  #+begin_src emacs-lisp
    ;; disable bars
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)

    ;; cursor
    (blink-cursor-mode 0)
    (setq x-stretch-cursor t)
    (setq cursor-in-non-selected-windows nil)
    (set-cursor-color "red")

    ;; some sane defaults
    (setq inhibit-splash-screen t ;; no thanks
          use-file-dialog nil) ;; don't use system file dialog

    ;; line highlight
    (global-hl-line-mode 1)

    ;; line-numbers
    (global-display-line-numbers-mode 1)
    (setq display-line-numbers-type 'relative)
    (line-number-mode 1)
    (column-number-mode 1)

    ;; highlight trailing whitespaces
    (setq-default show-trailing-whitespace t)

    ;; scroll
    (setq scroll-conservatively 1)
    (setq scroll-margin 3)

    ;; border color column
    (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
  #+end_src


* default OTHER
  #+begin_src emacs-lisp
    ;; use clipboard for cut
    (setq select-enable-clipboard t)

    ;; confirm quit
    (setq confirm-kill-emacs 'y-or-n-p)

    ;; supress warnings
    (setq warning-minimum-level :error)

    ;; remember cursor position when open file again
    (save-place-mode 1)

    ;; recent files history
    (recentf-mode 1)

    ;; change buffer when file changes on disk
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)

    ;; word delimiters
    (modify-syntax-entry ?_ "w")
  #+end_src


* default FILES
  #+begin_src emacs-lisp
    ;; no backup files
    (setq make-backup-files nil)
    (setq auto-save-default nil)

    ;; keep backup and save files in a dedicated directory
    (setq backup-directory-alist
          `((".*" . ,(concat user-emacs-directory "backups")))
          auto-save-file-name-transforms
          `((".*" ,(concat user-emacs-directory "backups") t)))

    ;; no need to create lockfiles
    (setq create-lockfiles nil)
  #+end_src


* PROJECTILE
  #+begin_src emacs-lisp
    ;; projectile for projects discovery
    (use-package projectile
      :init
      (projectile-mode t))

    ;; projectile will list projects from these paths
    (setq projectile-project-search-path
          '(("~/Documents/projects/" . 1) ("~/Documents/SPELL/" . 1) ("~/.emacs.d/" . 1)))
  #+end_src


* KEYS
  #+begin_src emacs-lisp
    ;; evil
    (use-package evil
      :init
      (setq evil-want-C-u-scroll t
    	evil-want-Y-yank-to-eol t)
      :config
      (evil-mode 1)
      (evil-set-undo-system 'undo-redo))

    ;; emacs for some modes
    (setq m3xan1k-emacs-state-modes '(telega-root-mode
    				  telega-chat-mode
    				  org-mode
    				  eww-mode))

    (defun m3xan1k-apply-emacs-state (modes)
      (while (> (length modes) 0)
        (evil-set-initial-state (pop modes) 'emacs)))

    (m3xan1k-apply-emacs-state m3xan1k-emacs-state-modes)

    ;; custom resize
    (defun my/enlarge-window-horizontally ()
      (interactive)
      (enlarge-window-horizontally 5))

    (defun my/enlarge-window ()
      (interactive)
      (enlarge-window 5))

    (defun my/shrink-window-horizontally ()
      (interactive)
      (shrink-window-horizontally 5))

    (defun my/shrink-window ()
      (interactive)
      (shrink-window 5))

    ;; general
    (use-package general
      :config
      (general-evil-setup)

      ;; escape on jk
      (general-imap "j"
        (general-key-dispatch 'self-insert-command
          :timeout 0.25
          "k" 'evil-normal-state))

      ;; make SPC noop
      (general-def
        :states
        '(normal motion)
        "SPC"
        nil)

      ;; unbind some annoying default bindings
      (general-unbind
        "M-j"
        "M-k"
        "C-x C-r"   ;; unbind find file read only
        "C-x C-z"   ;; unbind suspend frame
        "C-x C-d"   ;; unbind list directory
        "<mouse-2>") ;; pasting with mouse wheel click

      ;; leader
      (general-create-definer my/leader
        :states '(normal visual)
        :keymaps 'override
        :prefix "SPC")

      ;; local-leader
      (general-create-definer my/local-leader
        :states '(normal visual)
        :keymaps 'override
        :prefix ",")

      ;; error diagnostics
      (my/leader
        "e" '(:ignore t :wk "error")
        "e n" '(flymake-goto-next-error :wk "goto-next-error")
        "e p" '(flymake-goto-prev-error :wk "goto-prev-error"))

      (my/leader
        "g" '(:ignore t :wk "git")
        "g h" '(:ignore t :wk "hunk")
        "g h n" '(git-gutter:next-hunk :wk "git-gutter:next-hunk")
        "g h p" '(git-gutter:previous-hunk :wk "git-gutter:previous-hunk")
        "g h s" '(git-gutter:popup-hunk :wk "git-gutter:popup-hunk")
        "g h r" '(git-gutter:revert-hunk :wk "git-gutter:revert-hunk"))

      ;; help
      (my/leader
        "h" '(:ignore t :wk "help")
        "h h" '(help-command :wk "help-command"))

      ;; project
      (my/leader
        "p" '(:ignore t :wk "project")
        "p p" '(projectile-switch-project :wk "projectile-switch-project")
        "p b" '(consult-project-buffer :wk "project buffers")
        "p f" '(project-find-file :wk "project-find-file"))

      ;; widely used
      (my/leader
        "/" '(consult-ripgrep :wk "search in project")
        "SPC" '(execute-extended-command :wk "execute command")
        ";" '(comment-line :wk "comment line"))

      ;; file
      (my/leader
        "f" '(:ignore t :wk "file")
        "f s" '(save-buffer :wk "save file")
        "f S" '(save-buffers :wk "save all files")
        "f f" '(find-file :wk "find file"))

      ;; search
      (my/leader
        "s" '(:ignore t :wk "search")
        "s r" '(vertico-repeat :wk "resume search")
        "s f" '(project-find-file :wk "find file in project")
        "s /" '(consult-ripgrep :wk "search in project")
        "s c" '(m3xan1k-consult-ripgrep-at-point :wk "m3xan1k-consult-ripgrep-at-point"))

      ;; buffer management
      (my/leader
        "b" '(:ignore t :wk "buffers")
        "b n" '(centaur-tabs-forward :wk "next tab")
        "b p" '(centaur-tabs-backward :wk "previous tab")
        "b d" '(kill-this-buffer :wk "close current buffer")
        "b D" '(kill-buffer :wk "close buffer interactively")
        "b b" '(consult-buffer :wk "search buffers")
        "b r" '(reload-buffer :wk "reload buffer")
        "b l" '(evil-switch-to-window-last-buffer :wk "last buffer"))

      ;; window management
      (my/leader
        "w" '(:ignore t :wk "windows")
        "w d" '(delete-window :wk "close window")
        "w D" '(delete-other-windows :wk "close all other windows")
        "w o" '(other-window :wk "switch to other window")
        "w ;" '(evil-window-split :wk "evil-window-spit")
        "w '" '(evil-window-vsplit :wk "evil-window-spit")
        "w h" '(evil-window-left :wk "evil-window-left")
        "w l" '(evil-window-right :wk "evil-window-right")
        "w j" '(evil-window-down :wk "evil-window-down")
        "w k" '(evil-window-up :wk "evil-window-up")
        "w r" '(:ignore t :wk "resize")
        "w r l" '(my/enlarge-window-horizontally :wk "enlarge-window-horizontally")
        "w r h" '(my/shrink-window-horizontally :wk "shrink-window-horizontally")
        "w r j" '(my/enlarge-window :wk "enlarge-window")
        "w r k" '(my/shrink-window :wk "shrink-window"))

      ;; lisp evaluation
      (my/local-leader
        :keymaps 'emacs-lisp-mode-map
        "e" '(:ignore t :wk "elisp")
        "e e" '(eval-last-sexp :wk "eval-last-sexp")
        "e r" '(eval-region :wk "eval region")
        "e d" '(eval-defun :wk "eval root form")
        "e b" '(eval-buffer :wk "eval-buffer"))

      ;; cider for clojure
      (my/local-leader
        :keymaps 'clojure-mode-map
        "c" '(cider-jack-in :wk "connect to nrepl")
        "e" '(:ignore t :wk "clojure")
        "e e" '(cider-eval-last-sexp :wk "cider-eval-last-sexp")
        "e r" '(cider-eval-defun-at-point :wk "cider-eval-defun-at-point")
        "e b" '(cider-eval-buffer :wk "cider-eval-buffer"))

      ;; racket
      (my/local-leader
        :keymaps 'racket-mode-map
        "e" '(:ignore t :wk "eval/send")
        "e e" '(racket-send-last-sexp :wk "racket-send-last-sexp")
        "e r" '(racket-send-definition :wk "racket-send-definition")
        "e b" '(racket-run :wk "racket run"))

      ;; common lisp
      (my/local-leader
        :keymaps 'lisp-mode-map
        "c" '(sly :wk "sly")
        "e" '(:ignore t :wk "eval")
        "e e" '(sly-eval-last-expression :wk "sly-eval-last-expression")
        "e d" '(sly-eval-defun :wk "sly-eval-defun")
        "e b" '(sly-eval-buffer :wk "sly-eval-buffer"))

      ;; sql
      (my/local-leader
        :keymaps 'sql-mode-map
        "e" '(lsp-sql-execute-query :wk "lsp-sql-execute-query"))

      ;; lsp stuff
      (general-define-key
       :states '(normal)
       :keymaps 'override
       "g h" '(eldoc :wk "signature help"))

      ;; quit
      (my/leader
        "q" '(:ignore t :wk "quit")
        "q q" '(save-buffers-kill-terminal :wk "quit emacs")
        "q w" '(quit-window :wk "quit window"))

      (general-define-key
       :states 'normal
       "C-h" 'centaur-tabs-backward)

      (general-define-key
       :states 'normal
       "C-l" 'centaur-tabs-forward))
  #+end_src


* LSP
  #+begin_src emacs-lisp
    ;; diagnostic popup at point
    (use-package flymake-diagnostic-at-point
      :after flymake
      :config
      (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))

    ;; company mode for completion
    (use-package company
      :config
      (setq company-idle-delay 0.2)
      (setq company-minimum-prefix-length 1)
      :bind (:map company-active-map
                  ("C-n" . company-select-next)
                  ("C-j" . company-select-next)
                  ("C-k" . company-select-previous)
                  ("C-p" . company-select-previous))
      :hook
      (prog-mode . company-mode))

    ;; help inside company interface
    (use-package company-quickhelp)
    (eval-after-load 'company
      '(define-key company-active-map (kbd "C-h") #'company-quickhelp-manual-begin))

    ;; lsp client
    (use-package eglot
      :defer t)

    ;; lsp breadcrumbs
    (use-package breadcrumb
      :config
      (breadcrumb-mode t))

    ;; python
    (use-package pipenv
      :hook (python-mode . pipenv-mode))

    (add-hook 'python-mode-hook
    	  (lambda () (eglot-ensure)))

    ;; golang
    (defun dev/go-mode-hook ()
      (setq tab-width 4))

    (use-package go-mode
      :hook
      ((go-mode . eglot-ensure)
       (go-mode . dev/go-mode-hook)))

    (defun go-install-save-hooks ()
      (add-hook 'before-save-hook #'eglot-format-buffer t t))
    (add-hook 'go-mode-hook #'go-install-save-hooks)

    ;; w3
    (use-package emmet-mode)

    (use-package web-mode)

    (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))

    (add-hook 'web-mode-hook 'emmet-mode)

    ;; ruby
    ;; (setq lsp-solargraph-server-command '("/home/m3xan1k/.gem/bin/solargraph" "stdio"))
    ;; (setq lsp-solargraph-use-bundler t)
    ;; (add-hook 'ruby-mode-hook #'lsp-deferred)


  #+end_src


* SEARCH
  #+begin_src emacs-lisp
    ;; search tools
    (use-package vertico
      :init
      (vertico-mode +1)
      (setq enable-recursive-minibuffers t)
      (add-hook 'minibuffer-setup-hook #'vertico-repeat-save))

    (use-package orderless
      :config
      (setq completion-styles '(orderless)
    	completion-category-defaults nil
    	completion-category-overrides nil))

    (use-package consult
      :config
      (consult-customize
       consult-async-min-input 1))

    (use-package marginalia
      :init
      (marginalia-mode))

    (defun m3xan1k-consult-ripgrep-at-point ()
      (interactive)
      (consult-ripgrep (projectile-project-root)(thing-at-point 'symbol)))

  #+end_src


* TOOLS
** WHICH-KEY
   #+begin_src emacs-lisp
     ;; which key
     (use-package which-key
       :config
       (which-key-mode))

     (setq which-key-idle-delay 0.5)
     (setq which-key-idle-secondary-delay 0)
     (setq which-key-max-display-columns 5)
     (setq which-key-add-column-padding 3)
   #+end_src

** GIT-GUTTER
   #+begin_src emacs-lisp
     ;; git gutter
     (use-package git-gutter)

     ;; If you enable global minor mode
     (global-git-gutter-mode t)
   #+end_src

** DASHBOARD
   #+begin_src emacs-lisp
     ;; start page
     (use-package dashboard
       :config
       (dashboard-setup-startup-hook))

     (setq dashboard-projects-backend 'project-el)
     (setq dashboard-items '((recents  . 5)
                             (projects . 5)
                             (agenda . 5)))
   #+end_src

** SMARTPARENS
   #+begin_src emacs-lisp
     ;; parens
     (use-package smartparens
       :config
       (require 'smartparens-config))

     (add-hook 'prog-mode-hook #'smartparens-mode)
   #+end_src

** EVIL_SURROUND
   #+begin_src emacs-lisp
     ;; same as vim-surround
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1))
   #+end_src

** MAGIT
   #+begin_src emacs-lisp
     ;; magit
     (use-package magit)
   #+end_src

** XCLIP
   #+begin_src emacs-lisp
     ;; terminal clipboard
     (use-package xclip
       :init
       (xclip-mode))
   #+end_src

** ESXML
   #+begin_src emacs-lisp
     ;; for my packages
     (use-package esxml)
   #+end_src
   
** ESUP
   #+begin_src emacs-lisp
     ;; profile
     ;; (use-package esup)
   #+end_src



* UI
  #+begin_src emacs-lisp
    ;; font
    (set-face-attribute 'default nil :font "Dejavu Sans Mono" :height 165)
    (set-face-attribute 'fringe nil :background nil)

    ;; additional theme
    (use-package almost-mono-themes)

    ;; tabs
    (use-package centaur-tabs
      :demand
      :config
      (centaur-tabs-mode t)
      (centaur-tabs-group-by-projectile-project)
      (centaur-tabs-change-fonts "Dejavu Sans Mono" 120))

    (setq centaur-tabs-cycle-scope 'tabs)
    (setq centaur-tabs-set-modified-marker t)

    ;; projectile for projects discovery
    (use-package projectile
      :init
      (projectile-mode t))

    ;; The maximum displayed length of the branch name of version control.
    (setq modeline-vcs-max-length 32)

    ;; git status customization
    (defun my/format-git-diff (plus-minus)
      "Takes 1\t2 returns [+1-2]"
      (concat "["
    	  (if (and plus-minus
    		   (string-match "^\\([0-9]+\\)\t\\([0-9]+\\)\t" plus-minus))
    	      (concat
    	       (propertize (format "+%s" (match-string 1 plus-minus)))
    	       (propertize (format "-%s" (match-string 2 plus-minus))))
    	    (propertize "✔" 'face '(:weight bold)))
    	  "]"))

    (defun my/glue-branch-diff (branch-name plus-minus-formatted)
      "returns branch-name[diff]"
      (let ((cut-length (- modeline-vcs-max-length
    		       (+ 2 (length plus-minus-formatted)))))
        (if (< cut-length (length branch-name))
    	(concat (substring branch-name 0 cut-length)
    		".."
    		plus-minus-formatted)
          (concat branch-name plus-minus-formatted))))

    (defadvice vc-git-mode-line-string (after plus-minus (file) compile activate)
      "Show the information of git diff on modeline."
      (let* ((plus-minus (vc-git--run-command-string file "diff" "--numstat" "--"))
    	 (plus-minus-formatted (my/format-git-diff plus-minus)))
        (setq ad-return-value
    	  (my/glue-branch-diff ad-return-value plus-minus-formatted))))

    ;; hide minor modes
    (use-package minions
      :config
      (minions-mode t))

    ;; minimal modeline
    (use-package mood-line
      :config
      (mood-line-mode))

  #+end_src


* TELEGA
  #+begin_src emacs-lisp
    ;; telega
    (use-package telega
      :commands
      (telega)
      :general
      (my/leader
        "t" '(:keymap telega-prefix-map :which-key "telega"))
      :config
      (setq telega-use-docker t)
      (setq telega-enable-storage-optimizer t)
      (setq telega-chat-input-markups '("markdown2" nil "org")))
  #+end_src


* ORG
  #+begin_src emacs-lisp
    ;; org
    ;; bullets for better visibility
    (use-package org-bullets
      :hook
      (org-mode . org-bullets-mode))

    (use-package org-preview-html)

    ;; todos path for agenda
    (setq org-agenda-files '("~/Nextcloud/org/src/todos"))

    ;; some defaults
    (setq org-adapt-indentation t)
    (setq org-todo-keywords
          '((sequence
    	 "NEXT(n)"
    	 "TODO(t)"
    	 "IN PROGRESS(i)"
    	 "WAITING(w)"
    	 "SOMEDAY(s)"
    	 "PROJ(p)"
    	 "REPEAT(r)"
    	 "|"
    	 "DONE(d)"
    	 "CANCELLED(c)")))

    (setq org-tag-alist
          '(("ADDRESS" . ?a)
    	("PHONE" . ?p)
    	("URGENT" . ?u)))

    ;; custom template
    (with-eval-after-load "org"
      (add-to-list 'org-structure-template-alist
    	       '("my"
    		 .
    		 "#+TITLE:\n#+TAGS: PHONE(o) COMPUTER(c) SHOPPING(s) URGENT(u)\n#+SEQ_TODO: NEXT(n) TODO(t) WAITING(w) SOMEDAY(s) PROJ(p) INPROGRESS(i) REPEAT(r) | DONE(d) CANCELLED(c)\n#+STARTUP: nologrepeat\n")))
  #+end_src
